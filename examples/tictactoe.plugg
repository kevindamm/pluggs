role xplayer, oplayer

data Marker = blank | x | o

Cell :: int -> int -> Marker

init {
	board.cell = Cell
	for i in int[1..3]: for j in int[1..3]: board.cell(i, j) = blank

	board.control = xplayer
	board.open :: bool
}

next(board.control <- oplayer)) :- board.control == xplayer
next(board.control <- xplayer)) :- board.control == oplayer

// Marking a cell is the primary action each player has.
AddMark :: int -> int -> Action
NOOP :: Action

// A player can mark a cell if it is blank and the player is in control
legal{?player: AddMark(?i, ?j)} :-
  (   board.cell(?i, ?j) == blank
  and board.control == ?player
	)

// The only legal move for a player not in control is a no-op.
legal{?player: NOOP} :- ?player != board.control

// A legal marking results in the cell being correctly updated next turn.
next{board.cell(?i, ?j) <- x} :-
  xplayer.does(AddMark(?i, ?j)) and board.cell(?i, ?j) == blank)
next{board.cell(?i, ?j) <- o} :-
	oplayer.does(AddMark(?i, ?j)) and board.cell(?i, ?j) == blank)

// A cell that has been marked will remain marked.
next{board.cell(?i, ?j) <- ?mark} :-
	board.cell(?i, ?j) == ?mark and distinct(?mark, blank)

// A cell will remain blank if it is not the one being marked.
next{board.cell(?i, ?j) <- blank} :- (
	board.cell(?i, ?j) == blank and
	board.control.does(AddMark(?m, ?n)) and
	(?i != ?m or ?j != ?n)
)


// Terminating conditions for the game.

row :: int -> Marker -> bool
row(?i, ?mark) :- (
	board.cell(?i, 1) == ?mark and
  board.cell(?i, 2) == ?mark and
  board.cell(?i, 3) == ?mark
)

column :: int -> Marker -> bool
column(?j, ?mark) :- (
	board.cell(1, ?j) == ?mark and
  board.cell(2, ?j) == ?mark and
  board.cell(3, ?j) == ?mark
)

diagonal :: Marker -> bool
diagonal(?mark) :- (
  board.cell(1, 1) == ?mark and
	board.cell(2, 2) == ?mark and
  board.cell(3, 3) == ?mark
)
diagonal(?mark) :- (
	board.cell(1, 3) == ?mark and
	board.cell(2, 2) == ?mark and
	board.cell(3, 1) == ?mark
)

line :: Marker -> bool
line(?p) :- row(?k, ?p)
line(?p) :- column(?k, ?p)
line(?p) :- diagonal(?p)

board.open :- board.cell(?i, ?j) == blank

terminal :- line(x)
terminal :- line(o)
terminal :- not board.open


// Goal evaluation: win, lose, draw conditions.

xplayer.goal(100) :- line(x)
xplayer.goal(0) :- line(o)
xplayer.goal(50) :- not line(x) and not line(o) and not board.open

oplayer.goal(100) :- line(o)
oplayer.goal(0) :- line(x)
oplayer.goal(50) :- not line(o) and not line(x) and not board.open

